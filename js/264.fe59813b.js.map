{"version":3,"file":"js/264.fe59813b.js","mappings":"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","sources":["webpack://zhizhi_cms/../../../packages/components/dialog/src/dialog-content.ts","webpack://zhizhi_cms/../../../packages/tokens/dialog.ts","webpack://zhizhi_cms/../../../packages/utils/vue/refs.ts","webpack://zhizhi_cms/../../../packages/components/dialog/src/dialog-content.vue","webpack://zhizhi_cms/../../../packages/components/dialog/src/dialog.ts","webpack://zhizhi_cms/../../../packages/components/dialog/src/use-dialog.ts","webpack://zhizhi_cms/../../../packages/components/dialog/src/dialog.vue","webpack://zhizhi_cms/../../../packages/components/dialog/index.ts","webpack://zhizhi_cms/../../../packages/utils/vue/vnode.ts","webpack://zhizhi_cms/../../../packages/components/overlay/src/overlay.ts","webpack://zhizhi_cms/../../../packages/components/overlay/index.ts","webpack://zhizhi_cms/../../../packages/hooks/use-draggable/index.ts","webpack://zhizhi_cms/../../../packages/utils/dom/scroll.ts","webpack://zhizhi_cms/../../../packages/hooks/use-lockscreen/index.ts","webpack://zhizhi_cms/../../../packages/hooks/use-same-target/index.ts"],"sourcesContent":["import { buildProps, iconPropType } from '@element-plus/utils'\n\nexport const dialogContentProps = buildProps({\n  center: {\n    type: Boolean,\n    default: false,\n  },\n  closeIcon: {\n    type: iconPropType,\n    default: '',\n  },\n  customClass: {\n    type: String,\n    default: '',\n  },\n  draggable: {\n    type: Boolean,\n    default: false,\n  },\n  fullscreen: {\n    type: Boolean,\n    default: false,\n  },\n  showClose: {\n    type: Boolean,\n    default: true,\n  },\n  title: {\n    type: String,\n    default: '',\n  },\n} as const)\n\nexport const dialogContentEmits = {\n  close: () => true,\n}\n","import type { CSSProperties, ComputedRef, InjectionKey, Ref } from 'vue'\nimport type { useNamespace } from '@element-plus/hooks'\n\nexport type DialogContext = {\n  dialogRef: Ref<HTMLElement | undefined>\n  headerRef: Ref<HTMLElement | undefined>\n  bodyId: Ref<string>\n  ns: ReturnType<typeof useNamespace>\n  rendered: Ref<boolean>\n  style: ComputedRef<CSSProperties>\n}\n\nexport const dialogInjectionKey: InjectionKey<DialogContext> =\n  Symbol('dialogInjectionKey')\n","import { isFunction } from '../types'\n\nimport type { ComponentPublicInstance, Ref } from 'vue'\n\nexport type RefSetter = (\n  el: Element | ComponentPublicInstance | undefined\n) => void\n\nexport const composeRefs = (\n  ...refs: (Ref<HTMLElement | undefined> | RefSetter)[]\n) => {\n  return (el: Element | ComponentPublicInstance | null) => {\n    refs.forEach((ref) => {\n      if (isFunction(ref)) {\n        ref(el as Element | ComponentPublicInstance)\n      } else {\n        ref.value = el as HTMLElement | undefined\n      }\n    })\n  }\n}\n","<template>\n  <div\n    :ref=\"composedDialogRef\"\n    :class=\"[\n      ns.b(),\n      ns.is('fullscreen', fullscreen),\n      ns.is('draggable', draggable),\n      { [ns.m('center')]: center },\n      customClass,\n    ]\"\n    :style=\"style\"\n    tabindex=\"-1\"\n    @click.stop\n  >\n    <header ref=\"headerRef\" :class=\"ns.e('header')\">\n      <slot name=\"header\">\n        <span role=\"heading\" :class=\"ns.e('title')\">\n          {{ title }}\n        </span>\n      </slot>\n      <button\n        v-if=\"showClose\"\n        :aria-label=\"t('el.dialog.close')\"\n        :class=\"ns.e('headerbtn')\"\n        type=\"button\"\n        @click=\"$emit('close')\"\n      >\n        <el-icon :class=\"ns.e('close')\">\n          <component :is=\"closeIcon || Close\" />\n        </el-icon>\n      </button>\n    </header>\n    <div :id=\"bodyId\" :class=\"ns.e('body')\">\n      <slot />\n    </div>\n    <footer v-if=\"$slots.footer\" :class=\"ns.e('footer')\">\n      <slot name=\"footer\" />\n    </footer>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, inject } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { FOCUS_TRAP_INJECTION_KEY } from '@element-plus/components/focus-trap'\nimport { useDraggable, useLocale } from '@element-plus/hooks'\nimport { CloseComponents, composeRefs } from '@element-plus/utils'\nimport { dialogInjectionKey } from '@element-plus/tokens'\nimport { dialogContentEmits, dialogContentProps } from './dialog-content'\n\nconst { t } = useLocale()\nconst { Close } = CloseComponents\n\ndefineOptions({ name: 'ElDialogContent' })\nconst props = defineProps(dialogContentProps)\ndefineEmits(dialogContentEmits)\n\nconst { dialogRef, headerRef, bodyId, ns, style } = inject(dialogInjectionKey)!\nconst { focusTrapRef } = inject(FOCUS_TRAP_INJECTION_KEY)!\n\nconst composedDialogRef = composeRefs(focusTrapRef, dialogRef)\n\nconst draggable = computed(() => props.draggable)\nuseDraggable(dialogRef, headerRef, draggable)\n</script>\n","import { buildProps, definePropType, isBoolean } from '@element-plus/utils'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { dialogContentProps } from './dialog-content'\n\nimport type { ExtractPropTypes } from 'vue'\n\ntype DoneFn = (cancel?: boolean) => void\nexport type DialogBeforeCloseFn = (done: DoneFn) => void\n\nexport const dialogProps = buildProps({\n  ...dialogContentProps,\n  appendToBody: {\n    type: Boolean,\n    default: false,\n  },\n  beforeClose: {\n    type: definePropType<DialogBeforeCloseFn>(Function),\n  },\n  destroyOnClose: {\n    type: Boolean,\n    default: false,\n  },\n  closeOnClickModal: {\n    type: Boolean,\n    default: true,\n  },\n  closeOnPressEscape: {\n    type: Boolean,\n    default: true,\n  },\n  lockScroll: {\n    type: Boolean,\n    default: true,\n  },\n  modal: {\n    type: Boolean,\n    default: true,\n  },\n  openDelay: {\n    type: Number,\n    default: 0,\n  },\n  closeDelay: {\n    type: Number,\n    default: 0,\n  },\n  top: {\n    type: String,\n  },\n  modelValue: {\n    type: Boolean,\n    default: false,\n  },\n  modalClass: String,\n  width: {\n    type: [String, Number],\n  },\n  zIndex: {\n    type: Number,\n  },\n  trapFocus: {\n    type: Boolean,\n    default: false,\n  },\n} as const)\n\nexport type DialogProps = ExtractPropTypes<typeof dialogProps>\n\nexport const dialogEmits = {\n  open: () => true,\n  opened: () => true,\n  close: () => true,\n  closed: () => true,\n  [UPDATE_MODEL_EVENT]: (value: boolean) => isBoolean(value),\n  openAutoFocus: () => true,\n  closeAutoFocus: () => true,\n}\nexport type DialogEmits = typeof dialogEmits\n","import {\n  computed,\n  getCurrentInstance,\n  nextTick,\n  onMounted,\n  ref,\n  watch,\n} from 'vue'\nimport { isClient, useTimeoutFn } from '@vueuse/core'\n\nimport {\n  defaultNamespace,\n  useGlobalConfig,\n  useId,\n  useLockscreen,\n  useZIndex,\n} from '@element-plus/hooks'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { addUnit } from '@element-plus/utils'\n\nimport type { CSSProperties, Ref, SetupContext } from 'vue'\nimport type { DialogEmits, DialogProps } from './dialog'\n\nexport const useDialog = (\n  props: DialogProps,\n  targetRef: Ref<HTMLElement | undefined>\n) => {\n  const instance = getCurrentInstance()!\n  const emit = instance.emit as SetupContext<DialogEmits>['emit']\n  const { nextZIndex } = useZIndex()\n\n  let lastPosition = ''\n  const titleId = useId()\n  const bodyId = useId()\n  const visible = ref(false)\n  const closed = ref(false)\n  const rendered = ref(false) // when desctroyOnClose is true, we initialize it as false vise versa\n  const zIndex = ref(props.zIndex || nextZIndex())\n\n  let openTimer: (() => void) | undefined = undefined\n  let closeTimer: (() => void) | undefined = undefined\n\n  const namespace = useGlobalConfig('namespace', defaultNamespace)\n\n  const style = computed<CSSProperties>(() => {\n    const style: CSSProperties = {}\n    const varPrefix = `--${namespace.value}-dialog` as const\n    if (!props.fullscreen) {\n      if (props.top) {\n        style[`${varPrefix}-margin-top`] = props.top\n      }\n      if (props.width) {\n        style[`${varPrefix}-width`] = addUnit(props.width)\n      }\n    }\n    return style\n  })\n\n  function afterEnter() {\n    emit('opened')\n  }\n\n  function afterLeave() {\n    emit('closed')\n    emit(UPDATE_MODEL_EVENT, false)\n    if (props.destroyOnClose) {\n      rendered.value = false\n    }\n  }\n\n  function beforeLeave() {\n    emit('close')\n  }\n\n  function open() {\n    closeTimer?.()\n    openTimer?.()\n\n    if (props.openDelay && props.openDelay > 0) {\n      ;({ stop: openTimer } = useTimeoutFn(() => doOpen(), props.openDelay))\n    } else {\n      doOpen()\n    }\n  }\n\n  function close() {\n    openTimer?.()\n    closeTimer?.()\n\n    if (props.closeDelay && props.closeDelay > 0) {\n      ;({ stop: closeTimer } = useTimeoutFn(() => doClose(), props.closeDelay))\n    } else {\n      doClose()\n    }\n  }\n\n  function handleClose() {\n    function hide(shouldCancel?: boolean) {\n      if (shouldCancel) return\n      closed.value = true\n      visible.value = false\n    }\n\n    if (props.beforeClose) {\n      props.beforeClose(hide)\n    } else {\n      close()\n    }\n  }\n\n  function onModalClick() {\n    if (props.closeOnClickModal) {\n      handleClose()\n    }\n  }\n\n  function doOpen() {\n    if (!isClient) return\n    visible.value = true\n  }\n\n  function doClose() {\n    visible.value = false\n  }\n\n  function onOpenAutoFocus() {\n    emit('openAutoFocus')\n  }\n\n  function onCloseAutoFocus() {\n    emit('closeAutoFocus')\n  }\n\n  if (props.lockScroll) {\n    useLockscreen(visible)\n  }\n\n  function onCloseRequested() {\n    if (props.closeOnPressEscape) {\n      handleClose()\n    }\n  }\n\n  watch(\n    () => props.modelValue,\n    (val) => {\n      if (val) {\n        closed.value = false\n        open()\n        rendered.value = true // enables lazy rendering\n        emit('open')\n        zIndex.value = props.zIndex ? zIndex.value++ : nextZIndex()\n        // this.$el.addEventListener('scroll', this.updatePopper)\n        nextTick(() => {\n          if (targetRef.value) {\n            targetRef.value.scrollTop = 0\n          }\n        })\n      } else {\n        // this.$el.removeEventListener('scroll', this.updatePopper\n        if (visible.value) {\n          close()\n        }\n      }\n    }\n  )\n\n  watch(\n    () => props.fullscreen,\n    (val) => {\n      if (!targetRef.value) return\n      if (val) {\n        lastPosition = targetRef.value.style.transform\n        targetRef.value.style.transform = ''\n      } else {\n        targetRef.value.style.transform = lastPosition\n      }\n    }\n  )\n\n  onMounted(() => {\n    if (props.modelValue) {\n      visible.value = true\n      rendered.value = true // enables lazy rendering\n      open()\n    }\n  })\n\n  return {\n    afterEnter,\n    afterLeave,\n    beforeLeave,\n    handleClose,\n    onModalClick,\n    close,\n    doClose,\n    onOpenAutoFocus,\n    onCloseAutoFocus,\n    onCloseRequested,\n    titleId,\n    bodyId,\n    closed,\n    style,\n    rendered,\n    visible,\n    zIndex,\n  }\n}\n","<template>\n  <teleport to=\"body\" :disabled=\"!appendToBody\">\n    <transition\n      name=\"dialog-fade\"\n      @after-enter=\"afterEnter\"\n      @after-leave=\"afterLeave\"\n      @before-leave=\"beforeLeave\"\n    >\n      <el-overlay\n        v-show=\"visible\"\n        custom-mask-event\n        :mask=\"modal\"\n        :overlay-class=\"modalClass\"\n        :z-index=\"zIndex\"\n      >\n        <div\n          role=\"dialog\"\n          aria-modal=\"true\"\n          :aria-label=\"title || undefined\"\n          :aria-labelledby=\"!title ? titleId : undefined\"\n          :aria-describedby=\"bodyId\"\n          :class=\"`${ns.namespace.value}-overlay-dialog`\"\n          @click=\"overlayEvent.onClick\"\n          @mousedown=\"overlayEvent.onMousedown\"\n          @mouseup=\"overlayEvent.onMouseup\"\n        >\n          <el-focus-trap\n            loop\n            :trapped=\"visible\"\n            focus-start-el=\"container\"\n            @focus-after-trapped=\"onOpenAutoFocus\"\n            @focus-after-released=\"onCloseAutoFocus\"\n            @release-requested=\"onCloseRequested\"\n          >\n            <el-dialog-content\n              v-if=\"rendered\"\n              ref=\"dialogContentRef\"\n              :custom-class=\"customClass\"\n              :center=\"center\"\n              :close-icon=\"closeIcon\"\n              :draggable=\"draggable\"\n              :fullscreen=\"fullscreen\"\n              :show-close=\"showClose\"\n              :title=\"title\"\n              @close=\"handleClose\"\n            >\n              <template #header>\n                <slot\n                  v-if=\"!$slots.title\"\n                  name=\"header\"\n                  :close=\"handleClose\"\n                  :title-id=\"titleId\"\n                  :title-class=\"ns.e('title')\"\n                />\n                <slot v-else name=\"title\" />\n              </template>\n              <slot />\n              <template v-if=\"$slots.footer\" #footer>\n                <slot name=\"footer\" />\n              </template>\n            </el-dialog-content>\n          </el-focus-trap>\n        </div>\n      </el-overlay>\n    </transition>\n  </teleport>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, provide, ref, useSlots } from 'vue'\nimport { ElOverlay } from '@element-plus/components/overlay'\nimport { useDeprecated, useNamespace, useSameTarget } from '@element-plus/hooks'\nimport { dialogInjectionKey } from '@element-plus/tokens'\nimport ElFocusTrap from '@element-plus/components/focus-trap'\nimport ElDialogContent from './dialog-content.vue'\nimport { dialogEmits, dialogProps } from './dialog'\nimport { useDialog } from './use-dialog'\n\ndefineOptions({\n  name: 'ElDialog',\n})\n\nconst props = defineProps(dialogProps)\ndefineEmits(dialogEmits)\nconst slots = useSlots()\n\nuseDeprecated(\n  {\n    scope: 'el-dialog',\n    from: 'the title slot',\n    replacement: 'the header slot',\n    version: '3.0.0',\n    ref: 'https://element-plus.org/en-US/component/dialog.html#slots',\n  },\n  computed(() => !!slots.title)\n)\n\nconst ns = useNamespace('dialog')\nconst dialogRef = ref<HTMLElement>()\nconst headerRef = ref<HTMLElement>()\nconst dialogContentRef = ref()\n\nconst {\n  visible,\n  titleId,\n  bodyId,\n  style,\n  rendered,\n  zIndex,\n  afterEnter,\n  afterLeave,\n  beforeLeave,\n  handleClose,\n  onModalClick,\n  onOpenAutoFocus,\n  onCloseAutoFocus,\n  onCloseRequested,\n} = useDialog(props, dialogRef)\n\nprovide(dialogInjectionKey, {\n  dialogRef,\n  headerRef,\n  bodyId,\n  ns,\n  rendered,\n  style,\n})\n\nconst overlayEvent = useSameTarget(onModalClick)\n\nconst draggable = computed(() => props.draggable && !props.fullscreen)\n\ndefineExpose({\n  /** @description whether the dialog is visible */\n  visible,\n  dialogContentRef,\n})\n</script>\n","import { withInstall } from '@element-plus/utils'\nimport Dialog from './src/dialog.vue'\n\nexport const ElDialog = withInstall(Dialog)\nexport default ElDialog\n\nexport * from './src/use-dialog'\nexport * from './src/dialog'\n","import {\n  Comment,\n  Fragment,\n  Text,\n  createBlock,\n  createCommentVNode,\n  isVNode,\n  openBlock,\n} from 'vue'\nimport { camelize, isArray } from '@vue/shared'\nimport { hasOwn } from '../objects'\nimport { debugWarn } from '../error'\nimport type {\n  VNode,\n  VNodeArrayChildren,\n  VNodeChild,\n  VNodeNormalizedChildren,\n} from 'vue'\n\nconst SCOPE = 'utils/vue/vnode'\n\nexport enum PatchFlags {\n  TEXT = 1,\n  CLASS = 2,\n  STYLE = 4,\n  PROPS = 8,\n  FULL_PROPS = 16,\n  HYDRATE_EVENTS = 32,\n  STABLE_FRAGMENT = 64,\n  KEYED_FRAGMENT = 128,\n  UNKEYED_FRAGMENT = 256,\n  NEED_PATCH = 512,\n  DYNAMIC_SLOTS = 1024,\n  HOISTED = -1,\n  BAIL = -2,\n}\n\nexport function isFragment(node: VNode): boolean\nexport function isFragment(node: unknown): node is VNode\nexport function isFragment(node: unknown): node is VNode {\n  return isVNode(node) && node.type === Fragment\n}\n\nexport function isText(node: VNode): boolean\nexport function isText(node: unknown): node is VNode\nexport function isText(node: unknown): node is VNode {\n  return isVNode(node) && node.type === Text\n}\n\nexport function isComment(node: VNode): boolean\nexport function isComment(node: unknown): node is VNode\nexport function isComment(node: unknown): node is VNode {\n  return isVNode(node) && node.type === Comment\n}\n\nconst TEMPLATE = 'template'\nexport function isTemplate(node: VNode): boolean\nexport function isTemplate(node: unknown): node is VNode\nexport function isTemplate(node: unknown): node is VNode {\n  return isVNode(node) && node.type === TEMPLATE\n}\n\n/**\n * determine if the element is a valid element type rather than fragments and comment e.g. <template> v-if\n * @param node {VNode} node to be tested\n */\nexport function isValidElementNode(node: VNode): boolean\nexport function isValidElementNode(node: unknown): node is VNode\nexport function isValidElementNode(node: unknown): node is VNode {\n  return isVNode(node) && !isFragment(node) && !isComment(node)\n}\n\n/**\n * get a valid child node (not fragment nor comment)\n * @param node {VNode} node to be searched\n * @param depth {number} depth to be searched\n */\nfunction getChildren(\n  node: VNodeNormalizedChildren | VNodeChild,\n  depth: number\n): VNodeNormalizedChildren | VNodeChild {\n  if (isComment(node)) return\n  if (isFragment(node) || isTemplate(node)) {\n    return depth > 0 ? getFirstValidNode(node.children, depth - 1) : undefined\n  }\n  return node\n}\n\nexport const getFirstValidNode = (\n  nodes: VNodeNormalizedChildren,\n  maxDepth = 3\n) => {\n  if (Array.isArray(nodes)) {\n    return getChildren(nodes[0], maxDepth)\n  } else {\n    return getChildren(nodes, maxDepth)\n  }\n}\n\nexport function renderIf(\n  condition: boolean,\n  ...args: Parameters<typeof createBlock>\n) {\n  return condition ? renderBlock(...args) : createCommentVNode('v-if', true)\n}\n\nexport function renderBlock(...args: Parameters<typeof createBlock>) {\n  return openBlock(), createBlock(...args)\n}\n\nexport const getNormalizedProps = (node: VNode) => {\n  if (!isVNode(node)) {\n    debugWarn(SCOPE, '[getNormalizedProps] must be a VNode')\n    return {}\n  }\n\n  const raw = node.props || {}\n  const type = (isVNode(node.type) ? node.type.props : undefined) || {}\n  const props: Record<string, any> = {}\n\n  Object.keys(type).forEach((key) => {\n    if (hasOwn(type[key], 'default')) {\n      props[key] = type[key].default\n    }\n  })\n\n  Object.keys(raw).forEach((key) => {\n    props[camelize(key)] = raw[key]\n  })\n\n  return props\n}\n\nexport const ensureOnlyChild = (children: VNodeArrayChildren | undefined) => {\n  if (!isArray(children) || children.length > 1) {\n    throw new Error('expect to receive a single Vue element child')\n  }\n  return children[0]\n}\n","import { createVNode, defineComponent, h, renderSlot } from 'vue'\nimport { PatchFlags, buildProps, definePropType } from '@element-plus/utils'\nimport { useNamespace, useSameTarget } from '@element-plus/hooks'\n\nimport type { CSSProperties, ExtractPropTypes } from 'vue'\nimport type { ZIndexProperty } from 'csstype'\n\nexport const overlayProps = buildProps({\n  mask: {\n    type: Boolean,\n    default: true,\n  },\n  customMaskEvent: {\n    type: Boolean,\n    default: false,\n  },\n  overlayClass: {\n    type: definePropType<string | string[] | Record<string, boolean>>([\n      String,\n      Array,\n      Object,\n    ]),\n  },\n  zIndex: {\n    type: definePropType<ZIndexProperty>([String, Number]),\n  },\n} as const)\nexport type OverlayProps = ExtractPropTypes<typeof overlayProps>\n\nexport const overlayEmits = {\n  click: (evt: MouseEvent) => evt instanceof MouseEvent,\n}\nexport type OverlayEmits = typeof overlayEmits\n\nexport default defineComponent({\n  name: 'ElOverlay',\n\n  props: overlayProps,\n  emits: overlayEmits,\n\n  setup(props, { slots, emit }) {\n    const ns = useNamespace('overlay')\n\n    const onMaskClick = (e: MouseEvent) => {\n      emit('click', e)\n    }\n\n    const { onClick, onMousedown, onMouseup } = useSameTarget(\n      props.customMaskEvent ? undefined : onMaskClick\n    )\n\n    // init here\n    return () => {\n      // when the vnode meets the same structure but with different change trigger\n      // it will not automatically update, thus we simply use h function to manage updating\n      return props.mask\n        ? createVNode(\n            'div',\n            {\n              class: [ns.b(), props.overlayClass],\n              style: {\n                zIndex: props.zIndex,\n              },\n              onClick,\n              onMousedown,\n              onMouseup,\n            },\n            [renderSlot(slots, 'default')],\n            PatchFlags.STYLE | PatchFlags.CLASS | PatchFlags.PROPS,\n            ['onClick', 'onMouseup', 'onMousedown']\n          )\n        : h(\n            'div',\n            {\n              class: props.overlayClass,\n              style: {\n                zIndex: props.zIndex,\n                position: 'fixed',\n                top: '0px',\n                right: '0px',\n                bottom: '0px',\n                left: '0px',\n              } as CSSProperties,\n            },\n            [renderSlot(slots, 'default')]\n          )\n    }\n  },\n})\n","import Overlay from './src/overlay'\n\nexport const ElOverlay = Overlay\nexport default ElOverlay\n\nexport * from './src/overlay'\n","import { onBeforeUnmount, onMounted, watchEffect } from 'vue'\nimport { addUnit } from '@element-plus/utils'\nimport type { ComputedRef, Ref } from 'vue'\n\nexport const useDraggable = (\n  targetRef: Ref<HTMLElement | undefined>,\n  dragRef: Ref<HTMLElement | undefined>,\n  draggable: ComputedRef<boolean>\n) => {\n  let transform = {\n    offsetX: 0,\n    offsetY: 0,\n  }\n\n  const onMousedown = (e: MouseEvent) => {\n    const downX = e.clientX\n    const downY = e.clientY\n    const { offsetX, offsetY } = transform\n\n    const targetRect = targetRef.value!.getBoundingClientRect()\n    const targetLeft = targetRect.left\n    const targetTop = targetRect.top\n    const targetWidth = targetRect.width\n    const targetHeight = targetRect.height\n\n    const clientWidth = document.documentElement.clientWidth\n    const clientHeight = document.documentElement.clientHeight\n\n    const minLeft = -targetLeft + offsetX\n    const minTop = -targetTop + offsetY\n    const maxLeft = clientWidth - targetLeft - targetWidth + offsetX\n    const maxTop = clientHeight - targetTop - targetHeight + offsetY\n\n    const onMousemove = (e: MouseEvent) => {\n      const moveX = Math.min(\n        Math.max(offsetX + e.clientX - downX, minLeft),\n        maxLeft\n      )\n      const moveY = Math.min(\n        Math.max(offsetY + e.clientY - downY, minTop),\n        maxTop\n      )\n\n      transform = {\n        offsetX: moveX,\n        offsetY: moveY,\n      }\n      targetRef.value!.style.transform = `translate(${addUnit(\n        moveX\n      )}, ${addUnit(moveY)})`\n    }\n\n    const onMouseup = () => {\n      document.removeEventListener('mousemove', onMousemove)\n      document.removeEventListener('mouseup', onMouseup)\n    }\n\n    document.addEventListener('mousemove', onMousemove)\n    document.addEventListener('mouseup', onMouseup)\n  }\n\n  const onDraggable = () => {\n    if (dragRef.value && targetRef.value) {\n      dragRef.value.addEventListener('mousedown', onMousedown)\n    }\n  }\n\n  const offDraggable = () => {\n    if (dragRef.value && targetRef.value) {\n      dragRef.value.removeEventListener('mousedown', onMousedown)\n    }\n  }\n\n  onMounted(() => {\n    watchEffect(() => {\n      if (draggable.value) {\n        onDraggable()\n      } else {\n        offDraggable()\n      }\n    })\n  })\n\n  onBeforeUnmount(() => {\n    offDraggable()\n  })\n}\n","import { isClient } from '@vueuse/core'\nimport { getStyle } from './style'\n\nexport const isScroll = (el: HTMLElement, isVertical?: boolean): boolean => {\n  if (!isClient) return false\n\n  const key = (\n    {\n      undefined: 'overflow',\n      true: 'overflow-y',\n      false: 'overflow-x',\n    } as const\n  )[String(isVertical)]!\n  const overflow = getStyle(el, key)\n  return ['scroll', 'auto', 'overlay'].some((s) => overflow.includes(s))\n}\n\nexport const getScrollContainer = (\n  el: HTMLElement,\n  isVertical?: boolean\n): Window | HTMLElement | undefined => {\n  if (!isClient) return\n\n  let parent: HTMLElement = el\n  while (parent) {\n    if ([window, document, document.documentElement].includes(parent))\n      return window\n\n    if (isScroll(parent, isVertical)) return parent\n\n    parent = parent.parentNode as HTMLElement\n  }\n\n  return parent\n}\n\nlet scrollBarWidth: number\nexport const getScrollBarWidth = (namespace: string): number => {\n  if (!isClient) return 0\n  if (scrollBarWidth !== undefined) return scrollBarWidth\n\n  const outer = document.createElement('div')\n  outer.className = `${namespace}-scrollbar__wrap`\n  outer.style.visibility = 'hidden'\n  outer.style.width = '100px'\n  outer.style.position = 'absolute'\n  outer.style.top = '-9999px'\n  document.body.appendChild(outer)\n\n  const widthNoScroll = outer.offsetWidth\n  outer.style.overflow = 'scroll'\n\n  const inner = document.createElement('div')\n  inner.style.width = '100%'\n  outer.appendChild(inner)\n\n  const widthWithScroll = inner.offsetWidth\n  outer.parentNode?.removeChild(outer)\n  scrollBarWidth = widthNoScroll - widthWithScroll\n\n  return scrollBarWidth\n}\n\n/**\n * Scroll with in the container element, positioning the **selected** element at the top\n * of the container\n */\nexport function scrollIntoView(\n  container: HTMLElement,\n  selected: HTMLElement\n): void {\n  if (!isClient) return\n\n  if (!selected) {\n    container.scrollTop = 0\n    return\n  }\n\n  const offsetParents: HTMLElement[] = []\n  let pointer = selected.offsetParent\n  while (\n    pointer !== null &&\n    container !== pointer &&\n    container.contains(pointer)\n  ) {\n    offsetParents.push(pointer as HTMLElement)\n    pointer = (pointer as HTMLElement).offsetParent\n  }\n  const top =\n    selected.offsetTop +\n    offsetParents.reduce((prev, curr) => prev + curr.offsetTop, 0)\n  const bottom = top + selected.offsetHeight\n  const viewRectTop = container.scrollTop\n  const viewRectBottom = viewRectTop + container.clientHeight\n\n  if (top < viewRectTop) {\n    container.scrollTop = top\n  } else if (bottom > viewRectBottom) {\n    container.scrollTop = bottom - container.clientHeight\n  }\n}\n","import { isRef, onScopeDispose, watch } from 'vue'\n\nimport { computed } from '@vue/reactivity'\nimport { isClient } from '@vueuse/core'\nimport {\n  addClass,\n  getScrollBarWidth,\n  getStyle,\n  hasClass,\n  removeClass,\n  throwError,\n} from '@element-plus/utils'\nimport { useNamespace } from '../use-namespace'\n\nimport type { Ref } from 'vue'\n\n/**\n * Hook that monitoring the ref value to lock or unlock the screen.\n * When the trigger became true, it assumes modal is now opened and vice versa.\n * @param trigger {Ref<boolean>}\n */\nexport const useLockscreen = (trigger: Ref<boolean>) => {\n  if (!isRef(trigger)) {\n    throwError(\n      '[useLockscreen]',\n      'You need to pass a ref param to this function'\n    )\n  }\n\n  const ns = useNamespace('popup')\n\n  const hiddenCls = computed(() => ns.bm('parent', 'hidden'))\n\n  if (!isClient || hasClass(document.body, hiddenCls.value)) {\n    return\n  }\n\n  let scrollBarWidth = 0\n  let withoutHiddenClass = false\n  let bodyPaddingRight = '0'\n  let computedBodyPaddingRight = 0\n\n  const cleanup = () => {\n    removeClass(document.body, hiddenCls.value)\n    if (withoutHiddenClass) {\n      document.body.style.paddingRight = bodyPaddingRight\n    }\n  }\n  watch(trigger, (val) => {\n    if (!val) {\n      cleanup()\n      return\n    }\n\n    withoutHiddenClass = !hasClass(document.body, hiddenCls.value)\n    if (withoutHiddenClass) {\n      bodyPaddingRight = document.body.style.paddingRight\n      computedBodyPaddingRight = Number.parseInt(\n        getStyle(document.body, 'paddingRight'),\n        10\n      )\n    }\n    scrollBarWidth = getScrollBarWidth(ns.namespace.value)\n    const bodyHasOverflow =\n      document.documentElement.clientHeight < document.body.scrollHeight\n    const bodyOverflowY = getStyle(document.body, 'overflowY')\n    if (\n      scrollBarWidth > 0 &&\n      (bodyHasOverflow || bodyOverflowY === 'scroll') &&\n      withoutHiddenClass\n    ) {\n      document.body.style.paddingRight = `${\n        computedBodyPaddingRight + scrollBarWidth\n      }px`\n    }\n    addClass(document.body, hiddenCls.value)\n  })\n  onScopeDispose(() => cleanup())\n}\n","import { NOOP } from '@vue/shared'\n\nexport const useSameTarget = (handleClick?: (e: MouseEvent) => void) => {\n  if (!handleClick) {\n    return { onClick: NOOP, onMousedown: NOOP, onMouseup: NOOP }\n  }\n\n  let mousedownTarget = false\n  let mouseupTarget = false\n  // refer to this https://javascript.info/mouse-events-basics\n  // events fired in the order: mousedown -> mouseup -> click\n  // we need to set the mousedown handle to false after click fired.\n  const onClick = (e: MouseEvent) => {\n    // if and only if\n    if (mousedownTarget && mouseupTarget) {\n      handleClick(e)\n    }\n    mousedownTarget = mouseupTarget = false\n  }\n\n  const onMousedown = (e: MouseEvent) => {\n    // marking current mousedown target.\n    mousedownTarget = e.target === e.currentTarget\n  }\n  const onMouseup = (e: MouseEvent) => {\n    // marking current mouseup target.\n    mouseupTarget = e.target === e.currentTarget\n  }\n\n  return { onClick, onMousedown, onMouseup }\n}\n"],"names":["dialogContentProps","buildProps","center","type","Boolean","default","closeIcon","iconPropType","customClass","String","draggable","fullscreen","showClose","title","dialogContentEmits","close","dialogInjectionKey","Symbol","composeRefs","refs","el","forEach","ref","isFunction","value","t","Close","dialogRef","headerRef","bodyId","ns","style","focusTrapRef","composedDialogRef","props","useDraggable","dialogProps","appendToBody","beforeClose","definePropType","Function","destroyOnClose","closeOnClickModal","closeOnPressEscape","lockScroll","modal","openDelay","Number","closeDelay","top","modelValue","modalClass","width","zIndex","trapFocus","dialogEmits","open","opened","closed","UPDATE_MODEL_EVENT","isBoolean","openAutoFocus","closeAutoFocus","useDialog","targetRef","instance","getCurrentInstance","emit","nextZIndex","useZIndex","lastPosition","titleId","useId","visible","rendered","openTimer","closeTimer","namespace","useGlobalConfig","defaultNamespace","computed","style2","varPrefix","addUnit","afterEnter","afterLeave","beforeLeave","stop","useTimeoutFn","doOpen","doClose","handleClose","hide","shouldCancel","onModalClick","isClient","onOpenAutoFocus","onCloseAutoFocus","onCloseRequested","useLockscreen","watch","val","nextTick","scrollTop","transform","onMounted","slots","useDeprecated","scope","from","replacement","version","dialogContentRef","provide","overlayEvent","expose","ElDialog","withInstall","Dialog","PatchFlags","PatchFlags2","overlayProps","mask","customMaskEvent","overlayClass","Array","Object","overlayEmits","click","evt","MouseEvent","defineComponent","name","emits","setup","useNamespace","onMaskClick","e","onClick","onMousedown","onMouseup","useSameTarget","createVNode","class","b","renderSlot","h","position","right","bottom","left","ElOverlay","Overlay","dragRef","offsetX","offsetY","downX","clientX","downY","clientY","targetRect","getBoundingClientRect","targetLeft","targetTop","targetWidth","targetHeight","height","clientWidth","document","documentElement","clientHeight","minLeft","minTop","maxLeft","maxTop","onMousemove","e2","moveX","Math","min","max","moveY","removeEventListener","addEventListener","onDraggable","offDraggable","watchEffect","onBeforeUnmount","scrollBarWidth","getScrollBarWidth","_a","outer","createElement","className","visibility","body","appendChild","widthNoScroll","offsetWidth","overflow","inner","widthWithScroll","parentNode","removeChild","trigger","isRef","throwError","hiddenCls","bm","hasClass","withoutHiddenClass","bodyPaddingRight","computedBodyPaddingRight","cleanup","removeClass","paddingRight","parseInt","getStyle","bodyHasOverflow","scrollHeight","bodyOverflowY","addClass","onScopeDispose","handleClick","NOOP","mousedownTarget","mouseupTarget","target","currentTarget"],"sourceRoot":""}